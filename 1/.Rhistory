oauth_endpoints("twitter")
# 2. Register an application at https://apps.twitter.com/
# Make sure to set callback url to "http://127.0.0.1:1410"
#
# Replace key and secret below
myapp <- oauth_app("twitter",
key = "wijb9uSoLk2IlJi2kcOtbDo5y",
secret = "7SXVMu0uFb4QQFHT6mMB6zKzTSJquKyEKJXxpa6JGNTGv2bCWC"
)
# 3. Get OAuth credentials
twitter_token <- oauth1.0_token(oauth_endpoints("twitter"), myapp)
# 4. Use API
req <- GET("https://api.twitter.com/1.1/statuses/home_timeline.json",
config(token = twitter_token))
stop_for_status(req)
content(req)
library(httr)
# 1. Find OAuth settings for linkedin:
# https://developer.linkedin.com/documents/linkedins-oauth-details
oauth_endpoints("linkedin")
# 2. Register an application at https://www.linkedin.com/secure/developer
# Make sure to register http://localhost:1410/ as an "OAuth 2.0 Redirect URL".
# (the trailing slash is important!)
#
# Replace key and secret below.
myapp <- oauth_app("linkedin",
key = "75lkx3lw1ak9no",
secret = "RehYd2NcYWl5E17H")
# 3. Get OAuth credentials
# LinkedIn doesn't implement OAuth 2.0 standard
# (http://tools.ietf.org/html/rfc6750#section-2) so we extend the Token2.0
# ref class to implement a custom sign method.
TokenLinkedIn <- R6::R6Class("TokenLinkedIn", inherit = Token2.0, list(
sign = function(method, url) {
url <- parse_url(url)
url$query$oauth2_access_token <- self$credentials$access_token
list(url = build_url(url), config = config())
},
can_refresh = function() {
TRUE
},
refresh = function() {
self$credentials <- init_oauth2.0(self$endpoint, self$app,
scope = self$params$scope, type = self$params$type,
use_oob = self$params$use_oob)
}
))
token <- TokenLinkedIn$new(
endpoint = oauth_endpoints("linkedin"),
app = myapp,
params = list(use_oob = FALSE, scope = NULL, type = NULL)
)
library(httr)
# 1. Find OAuth settings for facebook:
# http://developers.facebook.com/docs/authentication/server-side/
oauth_endpoints("facebook")
# 2. Register an application at https://developers.facebook.com/apps/
# Insert your values below - if secret is omitted, it will look it up in
# the FACEBOOK_CONSUMER_SECRET environmental variable.
myapp <- oauth_app("facebook", "738191246327205")
# 3. Get OAuth credentials
facebook_token <- oauth2.0_token(oauth_endpoints("facebook"), myapp,
type = "application/x-www-form-urlencoded")
?stop_for_status
library(httr)
# 1. Find OAuth settings for twitter:
# https://dev.twitter.com/docs/auth/oauth
oauth_endpoints("twitter")
# 2. Register an application at https://apps.twitter.com/
# Make sure to set callback url to "http://127.0.0.1:1410"
#
# Replace key and secret below
myapp <- oauth_app("twitter",
key = "wijb9uSoLk2IlJi2kcOtbDo5y",
secret = "7SXVMu0uFb4QQFHT6mMB6zKzTSJquKyEKJXxpa6JGNTGv2bCWC"
)
# 3. Get OAuth credentials
twitter_token <- oauth1.0_token(oauth_endpoints("twitter"), myapp)
# 4. Use API
req <- GET("https://api.twitter.com/1.1/statuses/home_timeline.json",
config(token = twitter_token))
stop_for_status(req)
content(req)
req
library(httr)
# 1. Find OAuth settings for twitter:
# https://dev.twitter.com/docs/auth/oauth
oauth_endpoints("twitter")
# 2. Register an application at https://apps.twitter.com/
# Make sure to set callback url to "http://127.0.0.1:1410"
#
# Replace key and secret below
myapp <- oauth_app("twitter",
key = "wijb9uSoLk2IlJi2kcOtbDo5y",
secret = "7SXVMu0uFb4QQFHT6mMB6zKzTSJquKyEKJXxpa6JGNTGv2bCWC"
)
# 3. Get OAuth credentials
twitter_token <- oauth1.0_token(oauth_endpoints("twitter"), myapp)
# 4. Use API
#req <- GET("https://api.twitter.com/1.1/statuses/home_timeline.json",
req <- GET("https://api.twitter.com/1.1/statuses/lookup.json",
config(token = twitter_token))
stop_for_status(req)
content(req)
req
library(httr)
# 1. Find OAuth settings for twitter:
# https://dev.twitter.com/docs/auth/oauth
oauth_endpoints("twitter")
# 2. Register an application at https://apps.twitter.com/
# Make sure to set callback url to "http://127.0.0.1:1410"
#
# Replace key and secret below
myapp <- oauth_app("twitter",
key = "wijb9uSoLk2IlJi2kcOtbDo5y",
secret = "7SXVMu0uFb4QQFHT6mMB6zKzTSJquKyEKJXxpa6JGNTGv2bCWC"
)
# 3. Get OAuth credentials
twitter_token <- oauth1.0_token(oauth_endpoints("twitter"), myapp)
# 4. Use API
req <- GET("https://api.twitter.com/1.1/statuses/home_timeline.json",
#req <- GET("https://api.twitter.com/1.1/statuses/lookup.json",
config(token = twitter_token))
stop_for_status(req)
content(req)
req
library(httr)
# 1. Find OAuth settings for twitter:
# https://dev.twitter.com/docs/auth/oauth
oauth_endpoints("twitter")
# 2. Register an application at https://apps.twitter.com/
# Make sure to set callback url to "http://127.0.0.1:1410"
#
# Replace key and secret below
myapp <- oauth_app("twitter",
key = "wijb9uSoLk2IlJi2kcOtbDo5y",
secret = "7SXVMu0uFb4QQFHT6mMB6zKzTSJquKyEKJXxpa6JGNTGv2bCWC"
)
# 3. Get OAuth credentials
twitter_token <- oauth1.0_token(oauth_endpoints("twitter"), myapp)
# 4. Use API
#req <- GET("https://api.twitter.com/1.1/statuses/home_timeline.json",
req <- GET("https://api.twitter.com/1.1/statuses/lookup.json",
config(token = twitter_token))
stop_for_status(req)
content(req)
req
library(httr)
# 1. Find OAuth settings for twitter:
# https://dev.twitter.com/docs/auth/oauth
oauth_endpoints("twitter")
# 2. Register an application at https://apps.twitter.com/
# Make sure to set callback url to "http://127.0.0.1:1410"
#
# Replace key and secret below
myapp <- oauth_app("twitter",
key = "wijb9uSoLk2IlJi2kcOtbDo5y",
secret = "7SXVMu0uFb4QQFHT6mMB6zKzTSJquKyEKJXxpa6JGNTGv2bCWC"
)
# 3. Get OAuth credentials
twitter_token <- oauth1.0_token(oauth_endpoints("twitter"), myapp)
# 4. Use API
#req <- GET("https://api.twitter.com/1.1/statuses/home_timeline.json",
#req <- GET("https://api.twitter.com/1.1/statuses/lookup.json",
#           config(token = twitter_token))
stop_for_status(req)
content(req)
req <- 1
req
content(req)
library(httr)
# 1. Find OAuth settings for twitter:
# https://dev.twitter.com/docs/auth/oauth
oauth_endpoints("twitter")
# 2. Register an application at https://apps.twitter.com/
# Make sure to set callback url to "http://127.0.0.1:1410"
#
# Replace key and secret below
myapp <- oauth_app("twitter",
key = "wijb9uSoLk2IlJi2kcOtbDo5y",
secret = "7SXVMu0uFb4QQFHT6mMB6zKzTSJquKyEKJXxpa6JGNTGv2bCWC"
)
# 3. Get OAuth credentials
twitter_token <- oauth1.0_token(oauth_endpoints("twitter"), myapp)
# 4. Use API
req <- GET("https://api.twitter.com/1.1/statuses/home_timeline.json",
#req <- GET("https://api.twitter.com/1.1/statuses/lookup.json",
config(token = twitter_token))
stop_for_status(req)
content(req)
#req <- 1
req
library(httr)
# 1. Find OAuth settings for twitter:
# https://dev.twitter.com/docs/auth/oauth
oauth_endpoints("twitter")
# 2. Register an application at https://apps.twitter.com/
# Make sure to set callback url to "http://127.0.0.1:1410"
#
# Replace key and secret below
myapp <- oauth_app("twitter",
key = "wijb9uSoLk2IlJi2kcOtbDo5y",
secret = "7SXVMu0uFb4QQFHT6mMB6zKzTSJquKyEKJXxpa6JGNTGv2bCWC"
)
# 3. Get OAuth credentials
twitter_token <- oauth1.0_token(oauth_endpoints("twitter"), myapp)
# 4. Use API
req <- GET("https://api.twitter.com/1.1/statuses/home_timeline.json",
config(token = twitter_token))
stop_for_status(req)
content(req)
#req <- 1
req
req
library(httr)
# 1. Find OAuth settings for twitter:
# https://dev.twitter.com/docs/auth/oauth
oauth_endpoints("twitter")
# 2. Register an application at https://apps.twitter.com/
# Make sure to set callback url to "http://127.0.0.1:1410"
#
# Replace key and secret below
myapp <- oauth_app("twitter",
key = "wijb9uSoLk2IlJi2kcOtbDo5y",
secret = "7SXVMu0uFb4QQFHT6mMB6zKzTSJquKyEKJXxpa6JGNTGv2bCWC"
)
# 3. Get OAuth credentials
twitter_token <- oauth1.0_token(oauth_endpoints("twitter"), myapp)
# 4. Use API
req <- GET("https://api.twitter.com/1.1/statuses/home_timeline.json",
config(token = twitter_token))
stop_for_status(req)
content(req)
req
# https://dev.twitter.com/docs/auth/oauth
oauth_endpoints("twitter")
# 2. Register an application at https://apps.twitter.com/
# Make sure to set callback url to "http://127.0.0.1:1410"
#
# Replace key and secret below
myapp <- oauth_app("twitter",
key = "wijb9uSoLk2IlJi2kcOtbDo5y",
secret = "7SXVMu0uFb4QQFHT6mMB6zKzTSJquKyEKJXxpa6JGNTGv2bCWC"
)
# 3. Get OAuth credentials
twitter_token <- oauth1.0_token(oauth_endpoints("twitter"), myapp)
# 4. Use API
req <- GET("https://api.twitter.com/1.1/statuses/home_timeline.json",
config(token = twitter_token))
stop_for_status(req)
content(req)
library(httr)
# 1. Find OAuth settings for twitter:
# https://dev.twitter.com/docs/auth/oauth
oauth_endpoints("twitter")
# 2. Register an application at https://apps.twitter.com/
# Make sure to set callback url to "http://127.0.0.1:1410"
#
# Replace key and secret below
myapp <- oauth_app("twitter",
key = "wijb9uSoLk2IlJi2kcOtbDo5y",
secret = "7SXVMu0uFb4QQFHT6mMB6zKzTSJquKyEKJXxpa6JGNTGv2bCWC"
)
# 3. Get OAuth credentials
twitter_token <- oauth1.0_token(oauth_endpoints("twitter"), myapp)
# 4. Use API
req <- GET("https://api.twitter.com/1.1/statuses/home_timeline.json",
config(token = twitter_token))
stop_for_status(req)
content(req)
library(httr)
# 1. Find OAuth settings for twitter:
# https://dev.twitter.com/docs/auth/oauth
oauth_endpoints("twitter")
# 2. Register an application at https://apps.twitter.com/
# Make sure to set callback url to "http://127.0.0.1:1410"
#
# Replace key and secret below
myapp <- oauth_app("twitter",
key = "wijb9uSoLk2IlJi2kcOtbDo5y",
secret = "7SXVMu0uFb4QQFHT6mMB6zKzTSJquKyEKJXxpa6JGNTGv2bCWC"
)
# 3. Get OAuth credentials
twitter_token <- oauth1.0_token(oauth_endpoints("twitter"), myapp)
# 4. Use API
req <- GET("https://api.twitter.com/1.1/statuses/home_timeline.json",
config(token = twitter_token))
stop_for_status(req)
content(req)
library(httr)
# 1. Find OAuth settings for twitter:
# https://dev.twitter.com/docs/auth/oauth
oauth_endpoints("twitter")
# 2. Register an application at https://apps.twitter.com/
# Make sure to set callback url to "http://127.0.0.1:1410"
#
# Replace key and secret below
myapp <- oauth_app("twitter",
key = "wijb9uSoLk2IlJi2kcOtbDo5y",
secret = "7SXVMu0uFb4QQFHT6mMB6zKzTSJquKyEKJXxpa6JGNTGv2bCWC"
)
# 3. Get OAuth credentials
twitter_token <- oauth1.0_token(oauth_endpoints("twitter"), myapp)
# 4. Use API
#req <- GET("https://api.twitter.com/1.1/statuses/home_timeline.json",
req <- GET("https://api.twitter.com/1.1/statuses/lookup.json",
config(token = twitter_token))
stop_for_status(req)
content(req)
req
setwd("~/Learning/Coursera/05_Reproducible_Research/Assignment/1")
read.csv(activity.csv)
setwd("~/Learning/Coursera/05_Reproducible_Research/Assignment/1")
read.csv(activity.csv)
read.csv("activity.csv")
activity <- read.csv("activity.csv")
dim(actvity)
dim(activity)
head(activity)
tail(activity)
library(dplyr)
daily <- group_by(activity, date)
dim(activity)
dim(daily)
head(activity)
head(daily)
summarize (daily, steps = sum(steps, na.rm = TRUE))
dailySteps <- summarize (daily, steps = sum(steps, na.rm = TRUE))
dim(dailySteps)
hist(dailySteps)
hist(dailySteps$steps)
mean(dailySteps$steps)
median(dailySteps$steps)
head(activity)
activity[20,]
activity[1:20,]
activity[275:300,]
fiveMin <- group_by(activity, interval)
fiveMinSteps <- summarize (fiveMin, steps = sum(steps, na.rm=TRUE))
dim(fiveMinSteps)
with(fiveMinSteps, plot(interval~steps))
with(fiveMinSteps, plot(interval~steps), type=l)
head(fiveMinSteps)
with(fiveMinSteps, plot(steps~interval), type=l)
with(fiveMinSteps, line(steps~interval), type=l)
with(fiveMinSteps, plot(steps~interval), type=l)
with(fiveMinSteps, plot(steps~interval), type=l)
head(fiveMinSteps)
hist(dailySteps$steps)
fiveMinSteps$SerialNo <- seq(1:288)
dim(fiveMinSteps)
head(fiveMinSteps)
with(fiveMinSteps, plot(steps~SerialNo), type=l)
names(fiveMinSteps) <- c(interval, steps, intervalId)
names(fiveMinSteps) <- c("interval", "steps", "intervalId")
head(fiveMinSteps)
with(fiveMinSteps, plot(steps~intervalId), type=l)
names(fiveMinSteps) <- c("interval", "steps", "intervalID")
with(fiveMinSteps, plot(steps~intervalID), type=l)
fiveMinSteps <- summarize (fiveMin, steps = average(steps, na.rm=TRUE))
fiveMinSteps <- summarize (fiveMin, steps = mean(steps, na.rm=TRUE))
fiveMinSteps$SerialNo <- seq(1:288)
fiveMinSteps <- summarize (fiveMin, steps = mean(steps, na.rm=TRUE))
dim(fiveMinSteps)
fiveMinSteps$intervalID <- seq(1:288)
head(fiveMinSteps)
with(fiveMinSteps, plot(steps~intervalID), type=l)
max(fiveMinSteps$steps)
maxAvg <- filter(fiveMinSteps, fiveMinSteps$steps == max(fiveMinSteps$steps))
maxAvg
with(fiveMinSteps, plot(steps~intervalID), type="l")
with(fiveMinSteps, plot(steps~intervalID), type="l")
with(fiveMinSteps, plot(steps~intervalID), lty=1)
?plot
with(fiveMinSteps, plot(steps~intervalID), type = "l")
?plot
with(fiveMinSteps, plot(steps~intervalID, type = "l"))
fiveMin <- group_by(activity, interval)
fiveMinSteps <- summarize (fiveMin, steps = mean(steps, na.rm=TRUE))
fiveMinSteps$intervalID <- seq(1:288)
with(fiveMinSteps, plot(steps~intervalID, type = "l"))
maxAvg <- filter(fiveMinSteps, fiveMinSteps$steps == max(fiveMinSteps$steps))
maxAvg
fiveMin <- group_by(activity, interval)
fiveMinSteps <- summarize (fiveMin, steps = mean(steps, na.rm=TRUE))
fiveMinSteps$intervalID <- seq(1:288)
with(fiveMinSteps, plot(steps~intervalID, type = "l"))
maxAvg <- filter(fiveMinSteps, fiveMinSteps$steps == max(fiveMinSteps$steps))
maxAvg
with(activity, rownum)
?rownum
?rownums
nrow(activity)
with(activity, nrow)
case.complete(activity)
complete.cases(activity)
table(complete.cases(activity))
dim(activity)
table(complete.cases(activity))
table(complete.cases(activity))[1,1]
table(complete.cases(activity))
dim(table(complete.cases(activity)))
table(complete.cases(activity))[[1]]
?na.string
activityNoNA <- activity
filler <- 1.1111
activitynoNA[is.na(activitynoNA)] <- filler
head(activitynoNA)
activityNoNA <- activity
filler <- 1.1111
activitynoNA[is.na(activitynoNA)] <- filler
head(activitynoNA)
activityNoNA <- activity
activityNoNA <- activity
filler <- 1.1111
activityNoNA[is.na(activityNoNA)] <- filler
head(activityNoNA)
weekDay <- weekday(activityNoNA$date)
weekDay <- weekdays(activityNoNA$date)
summary(activityNoNA)
summary(activity)
summary(activity$date)
weekDay <- weekdays(as.Date(as.character(activityNoNA$date)))
table(weekDay)
library(dplyr)
activity <- read.csv("activity.csv")
#Q1
daily <- group_by(activity, date)
dailySteps <- summarize (daily, steps = sum(steps, na.rm = TRUE))
hist(dailySteps$steps)
mean(dailySteps$steps)
median(dailySteps$steps)
dim(daily)
dim(dailySteps)
head(dailySteps)
mean(dailySteps$steps)
median(dailySteps$steps)
fiveMin <- group_by(activity, interval)
fiveMinSteps <- summarize (fiveMin, steps = mean(steps, na.rm=TRUE))
fiveMinSteps$intervalID <- seq(1:288)
with(fiveMinSteps, plot(steps~intervalID, type = "l"))
maxAvg <- filter(fiveMinSteps, fiveMinSteps$steps == max(fiveMinSteps$steps))
maxAvg
#Q2
#grouping activity by the 5 minute intervals each day is split into
fiveMin <- group_by(activity, interval)
#finding the average of number of steps/ interval (data within each interval is from
#the same time slot across multiple days)
fiveMinSteps <- summarize (fiveMin, steps = mean(steps, na.rm=TRUE))
#adding an ID to each interval. 288 intervals of 5 minutes each = 1,440 minutes = 24 hours/ day.
fiveMinSteps$intervalID <- seq(1:288)
#plotting average number of steps against interval ID
with(fiveMinSteps, plot(steps~intervalID, type = "l"))
maxAvg <- filter(fiveMinSteps, fiveMinSteps$steps == max(fiveMinSteps$steps))
maxAvg
activityNoNA <- activity
filler <- 1.1111
activityNoNA[is.na(activityNoNA)] <- filler
head(activityNoNA)
with(activity, nrow)
case.complete(activity)
complete.cases(activity)
table(complete.cases(activity))
dim(table(complete.cases(activity)))
table(complete.cases(activity))[[1]]
mean(dailySteps$steps)
max(fiveMinSteps$steps)
mean(fiveMinSteps$steps)
filler <- mean(fiveMinSteps$steps)
activityNoNA[is.na(activityNoNA)] <- filler
head(activityNoNA)
activityNoNA[is.na(activityNoNA$steps)] <- filler
head(activityNoNA)
activityNoNA$steps[is.na(activityNoNA$steps)] <- filler
head(activityNoNA)
activityNoNA$steps[is.na(activityNoNA$steps)]
activityNoNA <- activity
filler <- mean(fiveMinSteps$steps)
activityNoNA[is.na(activityNoNA)] <- filler
head(activityNoNA)
activityNoNA <- activity
filler <- mean(fiveMinSteps$steps)
activityNoNA$steps[is.na(activityNoNA$steps)] <- filler
head(activityNoNA)
table(complete.cases(activity))[[1]]
dailyNoNA <- group_by(activityNoNA, date)
dailyStepsNoNA <- summarize (dailyNoNA, steps = sum(steps, na.rm = TRUE))
hist(dailyStepsNoNA$steps)
mean(dailyStepsNoNA$steps)
median(dailyStepsNoNA$steps)
daily <- group_by(activity, date)
dailySteps <- summarize (daily, steps = sum(steps, na.rm = TRUE))
#plotting and responding to the specific questions asked (histogram, mean and median)
hist(dailySteps$steps)
mean(dailySteps$steps)
median(dailySteps$steps)
hist(dailyStepsNoNA$steps)
activityNA <- activity[!complete.cases(activity)]
complete.cases(activity)
activityNA <- activity[complete.cases(activity)]
activityNA <- activity[is.na(activity$steps)]
activity$steps
activity[is.na(activity$steps)]
activity[is.na(activity)]
activityNA <- activity[is.na(activity)]
activityNoNA <- activity[!is.na(activity)]
dim(activityNA)
dim(activityNA)
head(activityNA)
head(activity)
activityNA <- activity[complete.cases(activity)]
complete.cases(activity)
