# 3. Get OAuth credentials
twitter_token <- oauth1.0_token(oauth_endpoints("twitter"), myapp)
# 4. Use API
#req <- GET("https://api.twitter.com/1.1/statuses/home_timeline.json",
#req <- GET("https://api.twitter.com/1.1/statuses/lookup.json",
#           config(token = twitter_token))
stop_for_status(req)
content(req)
req <- 1
req
content(req)
library(httr)
# 1. Find OAuth settings for twitter:
# https://dev.twitter.com/docs/auth/oauth
oauth_endpoints("twitter")
# 2. Register an application at https://apps.twitter.com/
# Make sure to set callback url to "http://127.0.0.1:1410"
#
# Replace key and secret below
myapp <- oauth_app("twitter",
key = "wijb9uSoLk2IlJi2kcOtbDo5y",
secret = "7SXVMu0uFb4QQFHT6mMB6zKzTSJquKyEKJXxpa6JGNTGv2bCWC"
)
# 3. Get OAuth credentials
twitter_token <- oauth1.0_token(oauth_endpoints("twitter"), myapp)
# 4. Use API
req <- GET("https://api.twitter.com/1.1/statuses/home_timeline.json",
#req <- GET("https://api.twitter.com/1.1/statuses/lookup.json",
config(token = twitter_token))
stop_for_status(req)
content(req)
#req <- 1
req
library(httr)
# 1. Find OAuth settings for twitter:
# https://dev.twitter.com/docs/auth/oauth
oauth_endpoints("twitter")
# 2. Register an application at https://apps.twitter.com/
# Make sure to set callback url to "http://127.0.0.1:1410"
#
# Replace key and secret below
myapp <- oauth_app("twitter",
key = "wijb9uSoLk2IlJi2kcOtbDo5y",
secret = "7SXVMu0uFb4QQFHT6mMB6zKzTSJquKyEKJXxpa6JGNTGv2bCWC"
)
# 3. Get OAuth credentials
twitter_token <- oauth1.0_token(oauth_endpoints("twitter"), myapp)
# 4. Use API
req <- GET("https://api.twitter.com/1.1/statuses/home_timeline.json",
config(token = twitter_token))
stop_for_status(req)
content(req)
#req <- 1
req
req
library(httr)
# 1. Find OAuth settings for twitter:
# https://dev.twitter.com/docs/auth/oauth
oauth_endpoints("twitter")
# 2. Register an application at https://apps.twitter.com/
# Make sure to set callback url to "http://127.0.0.1:1410"
#
# Replace key and secret below
myapp <- oauth_app("twitter",
key = "wijb9uSoLk2IlJi2kcOtbDo5y",
secret = "7SXVMu0uFb4QQFHT6mMB6zKzTSJquKyEKJXxpa6JGNTGv2bCWC"
)
# 3. Get OAuth credentials
twitter_token <- oauth1.0_token(oauth_endpoints("twitter"), myapp)
# 4. Use API
req <- GET("https://api.twitter.com/1.1/statuses/home_timeline.json",
config(token = twitter_token))
stop_for_status(req)
content(req)
req
# https://dev.twitter.com/docs/auth/oauth
oauth_endpoints("twitter")
# 2. Register an application at https://apps.twitter.com/
# Make sure to set callback url to "http://127.0.0.1:1410"
#
# Replace key and secret below
myapp <- oauth_app("twitter",
key = "wijb9uSoLk2IlJi2kcOtbDo5y",
secret = "7SXVMu0uFb4QQFHT6mMB6zKzTSJquKyEKJXxpa6JGNTGv2bCWC"
)
# 3. Get OAuth credentials
twitter_token <- oauth1.0_token(oauth_endpoints("twitter"), myapp)
# 4. Use API
req <- GET("https://api.twitter.com/1.1/statuses/home_timeline.json",
config(token = twitter_token))
stop_for_status(req)
content(req)
library(httr)
# 1. Find OAuth settings for twitter:
# https://dev.twitter.com/docs/auth/oauth
oauth_endpoints("twitter")
# 2. Register an application at https://apps.twitter.com/
# Make sure to set callback url to "http://127.0.0.1:1410"
#
# Replace key and secret below
myapp <- oauth_app("twitter",
key = "wijb9uSoLk2IlJi2kcOtbDo5y",
secret = "7SXVMu0uFb4QQFHT6mMB6zKzTSJquKyEKJXxpa6JGNTGv2bCWC"
)
# 3. Get OAuth credentials
twitter_token <- oauth1.0_token(oauth_endpoints("twitter"), myapp)
# 4. Use API
req <- GET("https://api.twitter.com/1.1/statuses/home_timeline.json",
config(token = twitter_token))
stop_for_status(req)
content(req)
library(httr)
# 1. Find OAuth settings for twitter:
# https://dev.twitter.com/docs/auth/oauth
oauth_endpoints("twitter")
# 2. Register an application at https://apps.twitter.com/
# Make sure to set callback url to "http://127.0.0.1:1410"
#
# Replace key and secret below
myapp <- oauth_app("twitter",
key = "wijb9uSoLk2IlJi2kcOtbDo5y",
secret = "7SXVMu0uFb4QQFHT6mMB6zKzTSJquKyEKJXxpa6JGNTGv2bCWC"
)
# 3. Get OAuth credentials
twitter_token <- oauth1.0_token(oauth_endpoints("twitter"), myapp)
# 4. Use API
req <- GET("https://api.twitter.com/1.1/statuses/home_timeline.json",
config(token = twitter_token))
stop_for_status(req)
content(req)
library(httr)
# 1. Find OAuth settings for twitter:
# https://dev.twitter.com/docs/auth/oauth
oauth_endpoints("twitter")
# 2. Register an application at https://apps.twitter.com/
# Make sure to set callback url to "http://127.0.0.1:1410"
#
# Replace key and secret below
myapp <- oauth_app("twitter",
key = "wijb9uSoLk2IlJi2kcOtbDo5y",
secret = "7SXVMu0uFb4QQFHT6mMB6zKzTSJquKyEKJXxpa6JGNTGv2bCWC"
)
# 3. Get OAuth credentials
twitter_token <- oauth1.0_token(oauth_endpoints("twitter"), myapp)
# 4. Use API
#req <- GET("https://api.twitter.com/1.1/statuses/home_timeline.json",
req <- GET("https://api.twitter.com/1.1/statuses/lookup.json",
config(token = twitter_token))
stop_for_status(req)
content(req)
req
activity[275:300,]
library(dplyr)
activity <- read.csv("activity.csv")
dim(activity)
head(activity)
tail(activity)
daily <- group_by(activity, date)
dim(daily)
head(daily)
dailySteps <- summarize (daily, steps = sum(steps, na.rm = TRUE))
dim(dailySteps)
head(dailySteps)
hist(dailySteps$steps)
mean(dailySteps$steps)
median(dailySteps$steps)
setwd("~/Learning/Coursera/05_Reproducible_Research/Assignment/1")
library(dplyr)
activity <- read.csv("activity.csv")
dim(activity)
head(activity)
tail(activity)
daily <- group_by(activity, date)
dim(daily)
head(daily)
dailySteps <- summarize (daily, steps = sum(steps, na.rm = TRUE))
dim(dailySteps)
head(dailySteps)
hist(dailySteps$steps)
mean(dailySteps$steps)
median(dailySteps$steps)
activity[275:300,]
fiveMin <- group_by(activity, interval)
fiveMinSteps <- summarize (fiveMin, steps = mean(steps, na.rm=TRUE))
fiveMinSteps$intervalID <- seq(1:288)
dim(fiveMinSteps)
head(fiveMinSteps)
with(fiveMinSteps, plot(steps~intervalID, type = "l"))
max(fiveMinSteps$steps)
maxAvg <- filter(fiveMinSteps, fiveMinSteps$steps == max(fiveMinSteps$steps))
maxAvg
library(dplyr)
activity <- read.csv("activity.csv")
#Q1
#grouping activity by date and then finding the sum of number of steps/ day
daily <- group_by(activity, date)
dailySteps <- summarize (daily, steps = sum(steps, na.rm = TRUE))
#plotting and responding to the specific questions asked (histogram, mean and median)
hist(dailySteps$steps)
mean(dailySteps$steps)
median(dailySteps$steps)
#Q2
#grouping activity by the 5 minute intervals each day is split into
fiveMin <- group_by(activity, interval)
#finding the average of number of steps/ interval (data within each interval is from
#the same time slot across multiple days)
fiveMinSteps <- summarize (fiveMin, steps = mean(steps, na.rm=TRUE))
#adding an ID to each interval. 288 intervals of 5 minutes each = 1,440 minutes = 24 hours/ day
fiveMinSteps$intervalID <- seq(1:288)
#plotting average number of steps against interval ID
with(fiveMinSteps, plot(steps~intervalID, type = "l"))
#identifying the time slot which has the max average number of steps
# Please note that "column interval" shows info in HHMM form while "interval ID" shows a running
# sequence of the 5 minute time slots starting at midnight
maxAvg <- filter(fiveMinSteps, fiveMinSteps$steps == max(fiveMinSteps$steps))
maxAvg
head(fiveMinSteps)
dim(fiveMinSteps)
?rep
meanSteps <- rep(fiveMinSteps$steps, 61)
dim(meanSteps)
len(meanSteps)
length(meanSteps)
nrow(activity)
cbind(activity, meanSteps)
daily <- group_by(activity, date)
dailySteps <- summarize (daily, steps = sum(steps, na.rm = TRUE))
#plotting and responding to the specific questions asked (histogram, mean and median)
hist(dailySteps$steps)
mean(dailySteps$steps)
median(dailySteps$steps)
fiveMin <- group_by(activity, interval)
#finding the average of number of steps/ interval (data within each interval is from
#the same time slot across multiple days)
fiveMinSteps <- summarize (fiveMin, steps = mean(steps, na.rm=TRUE))
#adding an ID to each interval. 288 intervals of 5 minutes each = 1,440 minutes = 24 hours/ day
fiveMinSteps$intervalID <- seq(1:288)
#plotting average number of steps against interval ID
with(fiveMinSteps, plot(steps~intervalID, type = "l"))
#identifying the time slot which has the max average number of steps
# Please note that "column interval" shows info in HHMM form while "interval ID" shows a running
# sequence of the 5 minute time slots starting at midnight
maxAvg <- filter(fiveMinSteps, fiveMinSteps$steps == max(fiveMinSteps$steps))
maxAvg
activity2 <- cbind(activity, meanSteps)
dim(activity)
dim(activity2)
head(activity2)
activity3 <- subset(activity2, is.na(activity2$steps))
dim(activity3)
activity4 <- subset(activity2, !is.na(activity2$steps))
dim(activity4)
dim(activity)
activity3$steps <- activity3$meanSteps
dim(activity3)
head(activity3)
activity5 <- rbind(activity3, activity4)
dim(activity5)
activity5[order(date),]
activity5[order(activity5$date),]
dim(activity5)
activity6 <- group_by(activity5, date)
activity7 <- summarize (activity6, steps = sum(steps, na.rm = TRUE))
hist(activity7$steps)
mean(activity7$steps)
median(activity7$steps)
hist(activity7$steps, xlab="Number of steps")
hist(activity7$steps, xlab="Number of steps", main = "Histogram of steps/day with imputed values")
hist(dailySteps$stepsxlab="Number of steps", main = "Histogram of steps/day with NA")
hist(dailySteps$steps, xlab="Number of steps", main = "Histogram of steps/day with NA")
hist(dailySteps$steps, xlab="Number of steps", main = "Histogram of steps/day (with NA)")
mean(dailySteps$steps)
median(dailySteps$steps)
mean(activity7$steps)
median(activity7$steps)
meanSteps <- rep(fiveMinSteps$steps, 61)
activity2 <- cbind(activity, meanSteps)
activity3 <- subset(activity2, is.na(activity2$steps))
activity4 <- subset(activity2, !is.na(activity2$steps))
activity3$steps <- activity3$meanSteps
activity5 <- rbind(activity3, activity4)
activity6 <- group_by(activity5, date)
activity7 <- summarize (activity6, steps = sum(steps))
hist(activity7$steps, xlab="Number of steps", main = "Histogram of steps/day with imputed values")
mean(activity7$steps)
median(activity7$steps)
#Q3
#Step 1: Create a vector of mean steps/ interval and repeat it for each of the 61 days
#for which data has been captured.
#Step 2: Bind the new vector to the original activity data frame
#Step 3: Subset two separate data frames with and without NA
#Step 4: Impute interval mean values to NA
#Step 5: Merge the data frame originally with out NA and the one in which values are imputed
#Step 6: Repeat steps from Q1 - group by date, sum steps by date, plot histogram and find mean
#& median
#Step1
meanSteps <- rep(fiveMinSteps$steps, 61)
#Step2
activity2 <- cbind(activity, meanSteps)
#Step3
activity3 <- subset(activity2, is.na(activity2$steps))
activity4 <- subset(activity2, !is.na(activity2$steps))
#Step4
activity3$steps <- activity3$meanSteps
#Step5
activity5 <- rbind(activity3, activity4)
#Step6
activity6 <- group_by(activity5, date)
activity7 <- summarize (activity6, steps = sum(steps))
hist(activity7$steps, xlab="Number of steps", main = "Histogram of steps/day with imputed values")
mean(activity7$steps)
median(activity7$steps)
weekDay <- weekdays(as.Date(as.character(activityNoNA$date)))
table(weekDay)
weekDay <- weekdays(as.Date(as.character(activityNoNA$date)))
weekDay <- weekdays(as.Date(as.character(activity7$date)))
table(weekDay)
weekDay
dim(activity5)
weekDay <- weekdays(as.Date(as.character(activity5$date)))
table(weekDay)
weekDay
activity8 <- cbind(activity5, weekDay)
dim(activity8)
head(activity8)
sum(activity8)
summary(activity8)
activity9 <- subset(activity8, activity8$weekDay = "Friday")
activity9 <- subset(activity8, activity8$weekDay == "Friday")
activity9
summary(activity9)
activity9 <- subset(activity8, activity8$weekDay == c("Saturday", "Sunday"))
activity9
summary(activity9)
activity5
head(activity3)
activity5 <- rbind(activity3, activity4)
activity5
activity
head(activity)
head(activity5)
tail(activity)
tail(activity5)
activity10 <- group_by(activity9, interval)
activity11 <- summarize (activity10, steps = mean(steps))
with(activity11, plot(steps~intervalID, type = "l"))
activity11$intervalID <- seq(1:288)
with(activity11, plot(steps~intervalID, type = "l"))
activity12 <- subset(activity8, activity8$weekDay !== c("Saturday", "Sunday"))
activity12 <- subset(activity8, activity8$weekDay != c("Saturday", "Sunday"))
summary(activity12)
summary(activity9)
activity12 <- subset(activity8, activity8$weekDay != c("Saturday", "Sunday"))
activity12
summary(activity12)
activity12 <- subset(activity8, !(activity8$weekDay == c("Saturday", "Sunday")))
summary(activity12)
activity12 <- subset(activity8, activity8$weekDay %in% c("Saturday", "Sunday"))
summary(activity12)
dim(activity8)
activity9 <- subset(activity8, activity8$weekDay == c("Saturday", "Sunday"))
summary(activity9)
summary(activity8)
summary(activity9)
activity9 <- subset(activity8, activity8$weekDay %in% c("Saturday", "Sunday"))
summary(activity9)
activity10 <- group_by(activity9, interval)
activity11 <- summarize (activity10, steps = mean(steps))
activity11$intervalID <- seq(1:288)
with(activity11, plot(steps~intervalID, type = "l"))
activity12 <- subset(activity8, activity8$weekDay !%in% c("Saturday", "Sunday"))
activity12 <- subset(activity8, activity8$weekDay %in% c("Saturday", "Sunday"))
summary(activity12)
activity12 <- activity8[!(activity8$weekDay %in% c("Saturday", "Sunday"))]
head(activity8)
activity12 <- activity8[!(weekDay %in% c("Saturday", "Sunday"))]
activity12 <- activity8[!(activity8$weekDay %in% c("Saturday", "Sunday")),]
summary(activity12)
summary(activity8)
summary(activity12)
activity13 <- group_by(activity12, interval)
activity11 <- summarize (activity10, steps = mean(steps))
activity11$intervalID <- seq(1:288)
activity13 <- group_by(activity12, interval)
activity14 <- summarize (activity13, steps = mean(steps))
activity14$intervalID <- seq(1:288)
with(activity14, plot(steps~intervalID, type = "l"))
head(activity11)
activity11$Day <- rep("Weekend", 288)
activity11
summary(activity11)
activity11$Day <- as.factor(rep("Weekend", 288))
summary(activity11)
activity14$Day <- as.factor(rep("Weekday", 288))
summary(activity14)
dim(activity14)
dim(activity11)
activity10 <- group_by(activity9, interval)
activity11 <- summarize (activity10, steps = mean(steps))
activity11$intervalID <- seq(1:288)
dim(activity11)
activity10 <- group_by(activity9, interval)
activity11 <- summarize (activity10, steps = mean(steps))
activity11$intervalID <- seq(1:288)
activity11$Day <- as.factor(rep("Weekend", 288))
activity11
summary(activity11)
dim(activity11)
activity12 <- activity8[!(activity8$weekDay %in% c("Saturday", "Sunday")),]
activity13 <- group_by(activity12, interval)
activity14 <- summarize (activity13, steps = mean(steps))
activity14$intervalID <- seq(1:288)
dim(activity14)
activity13 <- group_by(activity12, interval)
activity14 <- summarize (activity13, steps = mean(steps))
activity14$intervalID <- seq(1:288)
activity14$Day <- as.factor(rep("Weekday", 288))
summary(activity14)
dim(activity14)
activity15 <- rbind(activity11, activity14)
summary(activity15)
dim(activity15)
library(lattice)
xyplot(steps~intervalID | Day, data = activity15, layout =c(1,2))
xyplot(steps~intervalID | Day, data = activity15, layout =c(1,2), typle = "l")
xyplot(steps~intervalID | Day, data = activity15, layout =c(1,2), type = "l")
xyplot(steps~intervalID | Day, data = activity15, layout =c(1,2), type = "l", xlab = "Number of steps", ylab = "Interval")
xyplot(steps~intervalID | Day, data = activity15, layout =c(1,2), type = "l", ylab = "Number of steps", xlab = "Interval")
weekDay <- weekdays(as.Date(as.character(activity5$date)))
activity8 <- cbind(activity5, weekDay)
activity9 <- subset(activity8, activity8$weekDay %in% c("Saturday", "Sunday"))
activity10 <- group_by(activity9, interval)
activity11 <- summarize (activity10, steps = mean(steps))
activity11$intervalID <- seq(1:288)
activity11$Day <- as.factor(rep("Weekend", 288))
activity12 <- activity8[!(activity8$weekDay %in% c("Saturday", "Sunday")),]
activity13 <- group_by(activity12, interval)
activity14 <- summarize (activity13, steps = mean(steps))
activity14$intervalID <- seq(1:288)
activity14$Day <- as.factor(rep("Weekday", 288))
activity15 <- rbind(activity11, activity14)
library(lattice)
xyplot(steps~intervalID | Day, data = activity15, layout =c(1,2), type = "l", ylab = "Number of steps", xlab = "Interval")
with(fiveMinSteps, plot(steps~intervalID, type = "l"))
with(fiveMinSteps, plot(steps~intervalID, type = "l", ylab = "Number of steps", xlab = "Interval"))
#Setup
library(dplyr)
library(lattice)
activity <- read.csv("activity.csv")
#Q1
#grouping activity by date and then finding the sum of number of steps/ day
daily <- group_by(activity, date)
dailySteps <- summarize (daily, steps = sum(steps, na.rm = TRUE))
#plotting and responding to the specific questions asked (histogram, mean and median)
hist(dailySteps$steps, xlab="Number of steps", main = "Histogram of steps/day (with NA)")
mean(dailySteps$steps)
median(dailySteps$steps)
fiveMin <- group_by(activity, interval)
#finding the average of number of steps/ interval (data within each interval is from
#the same time slot across multiple days)
fiveMinSteps <- summarize (fiveMin, steps = mean(steps, na.rm=TRUE))
#adding an ID to each interval. 288 intervals of 5 minutes each = 1,440 minutes = 24 hours/ day
fiveMinSteps$intervalID <- seq(1:288)
#plotting average number of steps against interval ID
with(fiveMinSteps, plot(steps~intervalID, type = "l", ylab = "Number of steps", xlab = "Interval"))
#identifying the time slot which has the max average number of steps
# Please note that "column interval" shows info in HHMM form while "interval ID" shows a running
# sequence of the 5 minute time slots starting at midnight
maxAvg <- filter(fiveMinSteps, fiveMinSteps$steps == max(fiveMinSteps$steps))
maxAvg
maxAvg[[1]]
maxAvg[[3]]
table(complete.cases(activity))[[1]]
table(complete.cases(activity))
table(complete.cases(activity))[[1]]
#Q3
#Part 1
#Total number of rows with NAs
table(complete.cases(activity))[[1]]
#Part 2
#Step 1: Create a vector of mean steps/ interval and repeat it for each of the 61 days
#for which data has been captured.
#Step 2: Bind the new vector to the original activity data frame
#Step 3: Subset two separate data frames with and without NA
#Step 4: Impute interval mean values to NA
#Step1
meanSteps <- rep(fiveMinSteps$steps, 61)
#Step2
activity2 <- cbind(activity, meanSteps)
#Step3
activity3 <- subset(activity2, is.na(activity2$steps))
activity4 <- subset(activity2, !is.na(activity2$steps))
#Step4
activity3$steps <- activity3$meanSteps
#Part 3
#Merge the data frame originally with out NA and the one in which values are imputed
activity5 <- rbind(activity3, activity4)
#Part 4
#Group by date, sum steps by date, plot histogram and find mean & median
activity6 <- group_by(activity5, date)
activity7 <- summarize (activity6, steps = sum(steps))
hist(activity7$steps, xlab="Number of steps", main = "Histogram of steps/day with imputed values")
mean(activity7$steps)
median(activity7$steps)
summary(activity)
install.packages("markdown")
library(markdown)
knit2html
install.packages("knitr")
install.packages("knitr")
?knit2html
knit2html(PA1_template.Rmd)
